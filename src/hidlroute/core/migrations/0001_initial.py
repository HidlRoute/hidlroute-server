# Generated by Django 4.0.4 on 2022-05-21 14:43

#    Hidl Route - opensource vpn management system
#    Copyright (C) 2023 Dmitry Berezovsky, Alexander Cherednichenko
#
#    Hidl Route is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Hidl Route is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import autoslug.fields
from django.conf import settings
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import netfields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="FirewallService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        blank=True, editable=True, max_length=150, populate_from="name", unique=True
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("comment", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        blank=True, editable=True, max_length=150, populate_from="name", unique=True
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("comment", models.TextField(blank=True)),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comment", models.TextField(blank=True)),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.group")),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        blank=True, editable=True, max_length=150, populate_from="name", unique=True
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("comment", models.TextField(blank=True)),
                ("interface_name", models.CharField(max_length=16)),
                ("ip_address", netfields.fields.InetAddressField(max_length=39)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Subnet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        blank=True, editable=True, max_length=150, populate_from="name", unique=True
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("comment", models.TextField(blank=True)),
                ("cidr", netfields.fields.CidrAddressField(max_length=43)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Host",
            fields=[
                (
                    "member_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="hidl_core.member",
                    ),
                ),
                ("host_name", models.SlugField(max_length=100, unique=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("hidl_core.member",),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "member_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="hidl_core.member",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("hidl_core.member",),
        ),
        migrations.CreateModel(
            name="ServerToMember",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.member")),
                ("server", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hidl_core.server")),
                (
                    "subnet",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.subnet"
                    ),
                ),
            ],
            options={
                "verbose_name": "Member",
                "verbose_name_plural": "Members",
                "unique_together": {("server", "member")},
            },
        ),
        migrations.CreateModel(
            name="ServerToGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.group")),
                ("server", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.server")),
                (
                    "subnet",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.subnet"
                    ),
                ),
            ],
            options={
                "verbose_name": "Group",
                "verbose_name_plural": "Groups",
                "unique_together": {("server", "group")},
            },
        ),
        migrations.CreateModel(
            name="ServerRoutingRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comment", models.TextField(blank=True)),
                ("gateway", netfields.fields.InetAddressField(blank=True, max_length=39, null=True)),
                (
                    "interface",
                    models.CharField(
                        blank=True,
                        help_text="Use special keyword $self to reference interface of the VPN server this route is attached to",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.subnet"
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.server"
                    ),
                ),
                (
                    "server_group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.servertogroup"
                    ),
                ),
                (
                    "server_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hidl_core.servertomember",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="server",
            name="subnet",
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.subnet"),
        ),
        migrations.CreateModel(
            name="NetworkFilter",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("repr_cache", models.CharField(blank=True, max_length=200, null=True)),
                ("custom", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "server_group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.servertogroup"
                    ),
                ),
                (
                    "server_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hidl_core.servertomember",
                    ),
                ),
                (
                    "subnet",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="network_from",
                        to="hidl_core.subnet",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="member",
            name="servers",
            field=models.ManyToManyField(through="hidl_core.ServerToMember", to="hidl_core.server"),
        ),
        migrations.CreateModel(
            name="IpAllocationMeta",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_allocated_ip", netfields.fields.InetAddressField(blank=True, max_length=39, null=True)),
                ("server", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hidl_core.server")),
                ("subnet", models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to="hidl_core.subnet")),
            ],
        ),
        migrations.AddField(
            model_name="group",
            name="servers",
            field=models.ManyToManyField(through="hidl_core.ServerToGroup", to="hidl_core.server"),
        ),
        migrations.CreateModel(
            name="FirewallRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comment", models.TextField(blank=True)),
                ("repr_cache", models.CharField(blank=True, max_length=200, null=True)),
                ("order", models.PositiveIntegerField(default=0)),
                ("action", models.CharField(max_length=20)),
                (
                    "network_from",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="network_from",
                        to="hidl_core.networkfilter",
                        verbose_name="From",
                    ),
                ),
                (
                    "network_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="network_to",
                        to="hidl_core.networkfilter",
                        verbose_name="To",
                    ),
                ),
                ("server", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hidl_core.server")),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="hidl_core.firewallservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Firewall Rule",
            },
        ),
        migrations.CreateModel(
            name="FirewallPortRange",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("protocol", models.CharField(blank=True, max_length=20, null=True)),
                ("start", models.PositiveIntegerField()),
                ("end", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "service",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hidl_core.firewallservice"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        blank=True, editable=True, max_length=150, populate_from="name", unique=True
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("comment", models.TextField(blank=True)),
                ("ip_address", netfields.fields.InetAddressField(blank=True, max_length=39, unique=True)),
                ("mac_address", netfields.fields.MACAddressField(blank=True, null=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "server_to_member",
                    models.ForeignKey(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.servertomember"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClientRoutingRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comment", models.TextField(blank=True)),
                ("network", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="hidl_core.subnet")),
                (
                    "server",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.server"
                    ),
                ),
                (
                    "server_group",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="hidl_core.servertogroup"
                    ),
                ),
                (
                    "server_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hidl_core.servertomember",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="serverroutingrule",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("server__isnull", True), ("server_group__isnull", False), ("server_member__isnull", True)
                    ),
                    models.Q(
                        ("server__isnull", True), ("server_group__isnull", True), ("server_member__isnull", False)
                    ),
                    models.Q(
                        ("server__isnull", False), ("server_group__isnull", True), ("server_member__isnull", True)
                    ),
                    _connector="OR",
                ),
                name="check_hidl_core_serverroutingrule_member_xor_group_xor_server",
            ),
        ),
        migrations.AddField(
            model_name="person",
            name="user",
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name="ipallocationmeta",
            unique_together={("server", "subnet")},
        ),
        migrations.AddIndex(
            model_name="device",
            index=django.contrib.postgres.indexes.GistIndex(
                fields=["ip_address"], name="hidl_device_ipaddress_idx", opclasses=("inet_ops",)
            ),
        ),
        migrations.AddConstraint(
            model_name="clientroutingrule",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("server__isnull", True), ("server_group__isnull", False), ("server_member__isnull", True)
                    ),
                    models.Q(
                        ("server__isnull", True), ("server_group__isnull", True), ("server_member__isnull", False)
                    ),
                    models.Q(
                        ("server__isnull", False), ("server_group__isnull", True), ("server_member__isnull", True)
                    ),
                    _connector="OR",
                ),
                name="check_hidl_core_clientroutingrule_member_xor_group_xor_server",
            ),
        ),
    ]
