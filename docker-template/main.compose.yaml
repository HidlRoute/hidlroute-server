version: '3'
services:
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - "./data/db:/var/lib/postgresql/data"
    networks:
      - default

  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - "./data/redis:/data"
    networks:
      - default

  web:
    image: ${HIDLROUTE_IMAGE}:${HIDLROUTE_VERSION}
    restart: unless-stopped
    env_file:
      - .hidl.env
    environment:
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      DEFENDER_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      VIRTUAL_HOST: ${VIRTUAL_HOSTS}
      CERT_NAME: ${CERT_FILE}
    volumes:
      - "./extensions:/app/external"
      - "./config:/app/hidlroute/settings_override"
    networks:
      - default
    depends_on: [db, redis]

  worker:
    image: ${HIDLROUTE_IMAGE}:${HIDLROUTE_VERSION}
    network_mode: host
    restart: unless-stopped
    env_file:
      - .hidl.env
    environment:
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@localhost:${DATABASE_PORT}/${DATABASE_NAME}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@localhost:${REDIS_PORT}/0
      DEFENDER_REDIS_URL: redis://:${REDIS_PASSWORD}@localhost:${REDIS_PORT}/1
    volumes:
      - "./extensions:/app/external"
      - "./config:/app/hidlroute/settings_override"
    depends_on: [db, redis]

  proxy:
    image: nginxproxy/nginx-proxy:1.0.1-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      DEFAULT_HOST: ${VIRTUAL_HOSTS}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs:ro

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
          gateway: 172.27.0.1
    driver_opts:
      com.docker.network.bridge.name: br_hidl
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
      com.docker.network.bridge.enable_icc: "true"